// const _ = require('lodash')
// const { ethers } = require('ethers');
// const bn = ethers.BigNumber.from
const { JsonRpcProvider } = require('@ethersproject/providers')

const RPCs = [
    "https://bsc-dataseed.binance.org",
    "https://bsc-dataseed1.defibit.io",
    "https://bsc-dataseed1.ninicoin.io",
    "https://bsc-dataseed2.defibit.io",
    "https://bsc-dataseed3.defibit.io",
    "https://bsc-dataseed4.defibit.io",
    "https://bsc-dataseed2.ninicoin.io",
    "https://bsc-dataseed3.ninicoin.io",
    "https://bsc-dataseed4.ninicoin.io",
    "https://bsc-dataseed1.binance.org",
    "https://bsc-dataseed2.binance.org",
    "https://bsc-dataseed3.binance.org",
    "https://bsc-dataseed4.binance.org",
    "http://178.18.251.12:8545",
    "http://178.18.241.219:8545",
]

const txs = [
    '0xf9022c0b8502540be400830927c094f75a344e3dbcdc6de50c6162a076e9bfe04270ea80b901c43c42354500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000056bc75e2d6310000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000009b7fb3c69218b1ac735a741a18c07aa02ec1294fb92b04973b5559ba6c356bbc5b6a8b3c91def7440e0f2bf65947f2b97f829d343628f2a6559438ef8af26b55ba8fe8e15f2c3d4c94f880b40baa1ed5f805e392921206babce1662abaea4998fe480844a19da0221b2180a1d3722acd77c84f2af5d3df73affc33f85124d036f888c3f40c1d33b05cb3070e191d2bc5cad0ffaafb22bf3505d9b7a8ea600e981a86916225ef4400a8c7b592ac5e41ef7301083cb3a30daf363caca0f7985cfc6d178c2efee31742e75592d64e024b86b6b505f030797c7d268bb49959900c6243e9955a783f6844a5172b718692c651c0a4737df23bdc7710733072cf00301f39db08a078dcf2ccd4d1241e0d067659750b618527faf4b9fec20140cc53a62c58194a0bbde4d1b0488c08f30c6bb399f5da30c8ecf1450e5b3aaae3f2ac2910c5eb9fda004523da396d2e45039da6d949e608f7e2e98cc84356ed2b25877b9c9d886c25a',
    '0xf9022c078502540be400830927c094f75a344e3dbcdc6de50c6162a076e9bfe04270ea80b901c43c42354500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000091c09ce316546acabf3e60e4582114d8e06c57164a3e9016f0d41f62ac47336006ebf7088785fc07508a46e63b571cee0474495fff9ed63879d9687c18e0c6280ff29916b1a91efb066959db5c5ed5b6dc18667016c98e5c4d0ba4bd5601b44282add63fee39f39ed40476f6bc348018cf705d965c0ef2dcd0ba3103c31732a70080d35f30a0a17d76b2a964d2f29bfe271313678e674d7e1294e690ce192df19bfecc1cdfa8eb0b490e9d5f086264ff95692aa5eb827a6591d9a39d893a30ed9a1e287722e659a5fc87266e443ac21692958b7a9a426551bb5a8702aac2f817bfa014f2986142058b9c9f375e7ee6eed926a97f90c908e1a65dd99f64ec9cf4d5cba15871648bb363d56005f4fb7687c8c7a7ee72a0424e8d3d36deae2300cd18193a0e0f4df02118d7f7105e54b915bfa997f0ffc11e94624abdcf95d29ae911b0534a042fab99a4ff9554c3eb77c8912094d09af4736edea07d7edf99fb90507d0397c',
    '0xf9022c078502540be400830927c094f75a344e3dbcdc6de50c6162a076e9bfe04270ea80b901c43c42354500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000092983e57820c51d70979217c46e4d0a24108e27dda142f99d11e07933ad6affae121fb6149f8fb23e3aa63e8765af7e3375811b1f316aa5285c633b41b2971d5026002e3af89540fde5412ffb4e079e71fbc7f3844ea35e6ee3029dc36aa1a8ec8ed261c919b6f812ab0575d3afd4244bd8b029d96e3e6f750bf79ed32aa0055615680015bd38632761f32390e63aa6ec10bc9734d93ef89afb0337ef24e96585fd77961c2d96f1c37058f2e5f4fbacced89e9459019f689d28682f64b6d0d410ae7777e7324440814c8650d3d6393be1493a19e5518d7afc6759c24a0b989877fa014f2986142058b9c9f375e7ee6eed926a97f90c908e1a65dd99f64ec9cf4d5cba15871648bb363d56005f4fb7687c8c7a7ee72a0424e8d3d36deae2300cd18194a074a95ef4d989c8f7f09e79c8eb344eb65182d39cada0674257de008b20127414a03982fd23781458005035cf2e0a5e355b86f9e5bb7c99c37f4dca4e341d0aa64b',
]

const providers = RPCs.map(url => new JsonRpcProvider({ url, timeout: 6000 }))

const START_BLOCK = 13299252

for (const provider of providers) {
    provider.on('block', head => {
        if (head < START_BLOCK) {
            console.log(START_BLOCK-head)
            return
        }
        txs.map(tx => provider.sendTransaction(tx)
            .then(console.log)
            .catch(console.error)
        )
    })
}
